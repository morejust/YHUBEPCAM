{"version":3,"sources":["logo.svg","utils.js","components/TxLink.js","services/kassa.js","screens/Pay.js","screens/Main.js","components/AddressLink.js","screens/TransactionsPage.js","screens/ProductPage.js","screens/FaucetPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shortHash","hash","slice","TxLink","props","href","txId","target","rel","broadcast","waves","verify","waitForTx","libs","transfer","window","nodeUrl","kassaAddress","sendTx","tx","a","console","log","parsed","JSON","parse","fetchTxList","address","limit","fetch","then","res","json","decodeProduct","productId","db","items","find","product","i","parseInt","decodeProducts","productBytes","crypto","base58Decode","attachment","products","TextDecoder","decode","split","map","id","filter","p","sendFaucet","seed","signedTranserTx","amount","recipient","waitTx","apiBase","handleSendSuccess","resp","showOverlaySent","handlePaySuccess","showOverlayPaid","handleError","error","showOverlayError","message","useState","overlayType","setOverlay","errorMessage","setErrorMessage","setTx","setTxId","className","delay","resolution","onError","onScan","qr","_tx","catch","err","style","padding","maxWidth","margin","display","onClick","to","src","logo","alt","AddressLink","list","setList","isLoading","setLoading","useEffect","txList","alert","border","index","key","paddingTop","sender","Date","timestamp","toLocaleString","toFixed","n","match","params","maxHeight","STATUS","sent","paid","setAddress","setError","txStatus","setTxStatus","color","_address","App","path","component","Pay","FaucetPage","TransactionsPage","ProductPage","exact","Main","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c03f45b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8624eb1e.svg\";","export const shortHash = hash => {\n if (!hash) return ''\n return `${hash.slice(0, 5)}...${hash.slice(-3)}`\n}\n","import React from 'react'\nimport { shortHash } from '../utils'\n\nexport const TxLink = props => (\n  <a href={`https://wavesexplorer.com/testnet/tx/${props.txId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n    {shortHash(props.txId)}\n  </a>\n)\n\nexport default TxLink\n","import * as waves from '@waves/waves-transactions'\nimport db from './db.json'\n// import keychain from './keychain'\n\nconst { broadcast, verify, waitForTx, libs, transfer } = waves\n\nwindow.waves = waves\n\nconst nodeUrl = 'https://testnodes.wavesnodes.com'\nwindow.nodeUrl = nodeUrl\n\nexport const kassaAddress = '3MvgqcdKFrgrNjEbgtsV42Jd3KnkgkywWJY'\n\nexport const verifyTx = async tx => {\n  console.log('tx', tx)\n\n  const parsed = JSON.parse(tx)\n  console.log('parsed', parsed)\n\n  return verify(parsed)\n}\n\nexport const sendTx = async tx => {\n\n  console.log('tx', tx)\n\n  const parsed = JSON.parse(tx)\n  console.log('parsed', parsed)\n\n  console.log('verify', verify(parsed))\n\n  return broadcast(parsed, nodeUrl)\n}\n\nexport const fetchTxList = async (address = kassaAddress, limit = 100) => {\n  return fetch(`${nodeUrl}/transactions/address/${address}/limit/${limit}`)\n    .then(res => res.json())\n}\n\nexport const decodeProduct = productId => {\n  // use keychain.decodeMessage\n\n  return db.items.find(product => product.i === parseInt(productId, 10))\n}\n\nexport const decodeProducts = tx => {\n  const productBytes = libs.crypto.base58Decode(tx.attachment)\n  const enc = new TextDecoder(\"utf-8\")\n  const productList = enc.decode(productBytes)\n\n  // const productList = \"333,123\"\n\n  const products = productList.split(',')\n\n  console.log('products', products)\n  console.log('decoded', products.map(id => decodeProduct(id)))\n\n  return products.map(id => decodeProduct(id)).filter(p => !!p)\n}\n\nexport const sendFaucet = async (address, seed) => {\n  const signedTranserTx = transfer({\n    amount: 1e8,\n    recipient: address,\n  }, seed)\n\n  return broadcast(signedTranserTx, nodeUrl)\n}\n\nexport const waitTx = async txId => waitForTx(txId, { apiBase: nodeUrl })\n","import React, { useState } from 'react'\nimport QRReader from 'react-qr-reader'\nimport './Pay.css'\n\nimport TxLink from '../components/TxLink'\nimport { sendTx, waitTx } from '../services/kassa'\n\nexport default () => {\n\n  const handleScan = qr => {\n    if (!qr) { return }\n\n    console.log('scanned', qr)\n\n    const _tx = qr\n\n    if (tx === _tx) { return }\n\n    setTx(_tx)\n\n    sendTx(_tx)\n      .then(resp => {\n        console.log('resp', resp)\n        handleSendSuccess(resp)\n        const { id } = resp\n        setTxId(id)\n        return waitTx(id)\n      })\n      .then(resp => handlePaySuccess(resp))\n      .catch(err => handleError(err))\n  }\n\n  const handleSendSuccess = resp => {\n    console.log('resp', resp)\n\n    const hash = resp\n    console.log('Sent tx! hash=', hash)\n\n    showOverlaySent()\n  }\n\n  const handlePaySuccess = resp => {\n    console.log('resp', resp)\n\n    const hash = resp\n    console.log('Sent tx! hash=', hash)\n\n    showOverlayPaid()\n  }\n\n  const handleError = (error) => {\n    console.error(error)\n\n    showOverlayError(error.message)\n  }\n\n  const [ overlayType, setOverlay ] = useState('none')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ tx, setTx ] = useState('')\n  const [ txId, setTxId ] = useState(null)\n\n  const showOverlaySent = () => {\n    setOverlay('sent')\n  }\n\n  const showOverlayPaid = () => {\n    setOverlay('paid')\n  }\n\n  const showOverlayError = (message = '') => {\n    setOverlay('error')\n    setErrorMessage(message)\n  }\n\n  const hideOverlay = () => {\n    setOverlay('hide')\n  }\n  // const [ overlayText, showOverlayText ] = useState('none')\n\n  return (\n    <div className=\"screen pay-screen\">\n      <QRReader\n        delay={300}\n        resolution={1000}\n        onError={handleError}\n        onScan={handleScan}\n        style={{ padding: '50px', maxWidth: '500px', margin: '0 auto' }}\n      />\n\n      <span style={{ display: 'inline-block', padding: '40px' }}>(c) YHUBEPCAM</span>\n\n      <div className={`overlay overlay-${overlayType}`} onClick={hideOverlay}>\n        {overlayType === 'sent' && (\n          <span>Sending... <TxLink txId={txId} /></span>\n        )}\n\n        {overlayType === 'paid' && (\n          <span>Paid!</span>\n        )}\n\n        {overlayType === 'error' && (\n          <span>Error: {errorMessage}</span>\n        )}\n\n        {overlayType === 'none' && (\n          <span>Please, scan signed tx.</span>\n        )}\n\n        {overlayType === 'list' && (\n          <div>\n            <span>- Moloko</span>\n            <span>- Bread</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport logo from '../logo.svg'\n\n\nexport default () => {\n  return (\n    <header className=\"App-header\">\n      <Link to=\"/pay\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </Link>\n      <p>\n        Tap to scan QR code.\n      </p>\n    </header>\n  )\n}\n","import React from 'react'\nimport { shortHash } from '../utils'\n\nexport const AddressLink = props => (\n  <a href={`https://wavesexplorer.com/testnet/address/${props.address}`} target=\"_blank\" rel=\"noopener noreferrer\">\n    {shortHash(props.address)}\n  </a>\n)\n\nexport default AddressLink\n","import React, { useState, useEffect } from 'react'\n\nimport { fetchTxList, decodeProducts, kassaAddress } from '../services/kassa.js'\nimport TxLink from '../components/TxLink'\nimport AddressLink from '../components/AddressLink'\n\nexport default () => {\n  const [ list, setList ] = useState([])\n  const [ isLoading, setLoading ] = useState(true)\n\n  useEffect(() => {\n    fetchTxList()\n      .then(txList => txList[0].map(tx => ({ ...tx, products: decodeProducts(tx) })))\n      .then(txList => setList(txList))\n      .then(() => setLoading(false))\n      .catch(err => alert(err.message))\n  }, [])\n\n  console.log('transactions', list)\n\n  if (isLoading) {\n    return (\n      <header className=\"App-header\">\n      Loading...\n      </header>\n    )\n  }\n\n  return (\n    <header className=\"App-header\">\n      <h1>Kassa address: <AddressLink address={kassaAddress} /></h1>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>TX ID</th>\n            <th>SENDER</th>\n            <th>TIME</th>\n            <th>VALUE</th>\n            <th>PRODUCT LIST</th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((tx, index) => (\n            <tr key={index} style={{ paddingTop: '30px' }}>\n              <td>\n                <TxLink txId={tx.id} />\n              </td>\n              <td>\n                <AddressLink address={tx.sender} />\n              </td>\n              <td>{new Date(tx.timestamp).toLocaleString()}</td>\n              <td>{(tx.amount / 1e5).toFixed(2) || '0'} RUB</td>\n              <td>{(tx.products || []).map(p => (\n                <a href={`/products/${p.i}`} style={{ display: 'block' }}>\n                  {p.n}\n                </a>\n              )) || '-'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </header>\n  )\n}\n","import React from 'react'\nimport db from '../services/db.json'\n\nexport default (props) => {\n  const { id } = props.match.params\n  console.log(id)\n  const product = db.items.find(p => p.i === parseInt(id, 10))\n\n  if (!product) {\n    return (\n      <header className=\"App-header\">\n        <h1>Product not found</h1>\n      </header>\n    )\n  }\n  return (\n    <header className=\"App-header\">\n      <h1>Product {id}</h1>\n      <table>\n        <tr>\n          <td>\n          ID\n          </td>\n          <td>\n          {product.i}\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Name\n          </td>\n          <td>\n            {product.n}\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Image\n          </td>\n          <td>\n            <img src={product.p} style={{ maxWidth: '300px', maxHeight: '300px' }} alt=\"\" />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Price\n          </td>\n          <td>\n            {product.amount} RUB\n          </td>\n        </tr>\n      </table>\n    </header>\n  )\n}\n","import React, { useState } from 'react'\nimport QRReader from 'react-qr-reader'\n// import './Pay.css'\n\nimport AddressLink from '../components/AddressLink'\nimport TxLink from '../components/TxLink'\nimport { sendFaucet, waitTx } from '../services/kassa'\n\n// THIS IS SECURE\nconst UNSAFE_SEED = 'liquid trade skirt elbow employ bomb cradle genius liberty mean tape profit'\n\nconst STATUS = {\n  sent: 'Отправляется...',\n  paid: 'Успешно!',\n}\n\nexport default (props) => {\n  const [ address, setAddress ] = useState(null)\n  const [ error, setError ] = useState(null)\n  const [ txId, setTxId ] = useState(null)\n  const [ txStatus, setTxStatus ] = useState(null)\n\n  const handleScan = qr => {\n    if (!qr) { return }\n\n    console.log('scanned', qr)\n\n    const _address = qr\n\n    if (address === _address) { return }\n\n    setAddress(_address)\n\n    sendFaucet(_address, UNSAFE_SEED)\n      .then(res => {\n        setTxId(res.id)\n        setTxStatus('sent')\n        return waitTx(res.id)\n      })\n      .then(tx => setTxStatus('paid'))\n      .catch(err => handleError(err))\n  }\n\n  const handleError = err => setError(err.message)\n\n  return (\n    <div className=\"screen faucet-screen\">\n      <div style={{ paddingTop: '2rem' }}>&nbsp;</div>\n      <h1>Получи бесплатные рубли на покупки через блокчейн!</h1>\n\n      {error && (\n        <div style={{ color: 'red' }}>Error: {error}</div>\n      )}\n\n      {txStatus && (\n        <h1>{STATUS[txStatus]}</h1>\n      )}\n\n      {(txStatus === 'paid') && (\n        <h1><a href=\"/pay\">Now PAY</a></h1>\n      )}\n\n      {address && (<span>\n        Address: <AddressLink address={address} />\n      </span>)}\n\n      <br />\n\n      {txId && (<span>\n        TX ID: <TxLink txId={txId} />\n      </span>)}\n\n      <QRReader\n        delay={300}\n        resolution={1000}\n        onError={handleError}\n        onScan={handleScan}\n        style={{ padding: '50px', maxWidth: '500px', margin: '0 auto' }}\n      />\n\n      <span style={{ display: 'inline-block', padding: '40px' }}>(c) YHUBEPCAM</span>\n\n    </div>\n  )\n}\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport './App.css';\n\nimport Pay from './screens/Pay.js'\nimport Main from './screens/Main.js'\nimport TransactionsPage from './screens/TransactionsPage.js'\nimport ProductPage from './screens/ProductPage.js'\nimport FaucetPage from './screens/FaucetPage.js'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route path=\"/pay\" component={Pay} />\n        <Route path=\"/faucet\" component={FaucetPage} />\n        <Route path=\"/transactions\" component={TransactionsPage} />\n        <Route path=\"/products/:id\" component={ProductPage} />\n        <Route exact path=\"/\" component={Main} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}